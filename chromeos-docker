#!/bin/bash
SCRIPT_NAME=$(basename "$0")
USAGE="Usage: $SCRIPT_NAME armv7l|i686|x86_64"
if [ ! -d "$HOME/.ssh" ]; then
  echo "$HOME/.ssh directory does not exist."
  echo "Add your GitHub ssh keys and try again."
  exit 1
fi
if [ ! -d "$(pwd)/pkg_cache" ]; then
  echo "$(pwd)/pkg_cache directory does not exist."
  echo "Execute 'mkdir pkg_cache' and try again."
  exit 1
fi
if [ ! -d "$(pwd)/chromebrew" ]; then
  echo "$(pwd)/chromebrew directory does not exist."
  echo "Execute 'git clone https://github.com/chromebrew/chromebrew.git' and try again."
  exit 1
fi
if ! test "$1"; then
  echo "$USAGE"
  exit 1
fi
case "$1" in
  aarch64|arm|armv7|armv7l|armv8)
    ARCH=armv7l
    BOARD=fievel
    MILESTONE=m91
    PLATFORM=linux/arm/v7
    ;;
  i386|i686|ia32|x86)
    ARCH=i686
    BOARD=alex
    MILESTONE=m58
    PLATFORM=linux/386
    ;;
  ia64|x64|x86_64)
    ARCH=x86_64
    BOARD=nocturne
    MILESTONE=m90
    PLATFORM=linux/amd64
    ;;
  *)
    echo "$USAGE"
    exit 1
    ;;
esac
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  SESSION_TYPE=remote/ssh
elif pstree -p | egrep --quiet --extended-regexp ".*sshd.*\($$\)"; then
  SESSION_TYPE=remote/ssh
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) SESSION_TYPE=remote/ssh;;
  esac
fi
if [ -z ${PAGER+x} ]; then
  echo "PAGER is not set."
else
  PAGER_PASSTHROUGH=-e
  PAGER_PASSTHROUGH+=" "
  PAGER_PASSTHROUGH+=CONTAINER_PAGER=${PAGER}
fi
X11+=" "
X11=-e
X11+=" "
X11+=DISPLAY=${DISPLAY:-:0.0}
X11+=" "
if ! [[ $SESSION_TYPE == remote/ssh ]] && [ -d /tmp/.X11-unix ]; then
  X11+=" -v /tmp/.X11-unix:/tmp/.X11-unix "
fi
if [ -f "$HOME"/.Xauthority ]; then
  X11+=--volume=$HOME/.Xauthority:/home/chronos/user/.Xauthority:rw
  X11+=" "
  X11+=--volume=$HOME/.Xauthority:/home/chronos/.Xauthority:rw
fi
IMAGE="chromebrew/chromeos-$ARCH-$BOARD-$MILESTONE:latest"
docker pull --platform $PLATFORM $IMAGE
docker pull tonistiigi/binfmt
docker run --privileged --rm tonistiigi/binfmt --install all
echo "docker run --platform $PLATFORM --rm --net=host ${PAGER_PASSTHROUGH} ${X11} -e LOCALRC="${LOCALRC}" -v $(pwd)/pkg_cache:/usr/local/tmp/packages -v $(pwd)/chromebrew:/home/chronos/user/chromebrew -v $(pwd):/output -h $(hostname)-$ARCH -it $IMAGE"
docker run --platform $PLATFORM --rm --net=host ${PAGER_PASSTHROUGH} ${X11} -e LOCALRC="${LOCALRC}" -v $(pwd)/pkg_cache:/usr/local/tmp/packages -v $(pwd)/chromebrew:/home/chronos/user/chromebrew -v $(pwd):/output -h $(hostname)-$ARCH -it $IMAGE
